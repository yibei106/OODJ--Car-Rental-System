/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import static GUI.Files.editBooking;
import static GUI.Files.readBooking;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yibei
 */
public class cus_mail extends javax.swing.JFrame {

    /**
     * Creates new form cus_mail
     */
    String username;
    String car;

    public cus_mail() {
        initComponents();
        setMinimumSize(new java.awt.Dimension(1366, 796));
    }

    public cus_mail(String username) {
        initComponents();
        setMinimumSize(new java.awt.Dimension(1366, 796));
        this.username = username;
        displayTable((DefaultTableModel) table1.getModel(), "accept");
        displayTable((DefaultTableModel) table2.getModel(), "decline");
    }

    public void displayTable(DefaultTableModel model, String status) {
        try {
            model.setRowCount(0);
            ArrayList<Booking> list = readBooking();
            for (Booking b : list) {
                if (b.getUsername().equals(this.username) && b.getAdminStatus().equals(status) && b.getCusConfirmation().equals("noconfirmation")) {
                    String cusbooking = b.getCarID() + "," + b.getCarBrand() + "," + b.getCarName() + "," + b.getLocation() + "," + b.getPickupDate() + ","
                            + b.getPickupTime() + "," + b.getDropoffDate() + "," + b.getDropoffTime() + "," + b.getTotalPrice();
                    String[] bookInfo = cusbooking.split(",");
                    model.addRow(bookInfo);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(cus_mail.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        background = new javax.swing.JLabel();
        returnBT = new javax.swing.JButton();
        removeBT = new javax.swing.JButton();
        confirmBT = new javax.swing.JButton();
        cancelBT = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        table2.setBackground(new java.awt.Color(252, 223, 195));
        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CarID", "Brand", "Name", "Location", "Pickup Date", "Pickup Time", "Dropoff Date", "Dropoff Time"
            }
        ));
        table2.setSelectionBackground(new java.awt.Color(250, 157, 157));
        table2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table2);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(760, 220, 520, 420);

        table1.setBackground(new java.awt.Color(241, 234, 110));
        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CarID", "Brand", "Name", "Location", "Pickup Date", "Pickup Time", "Dropoff Date", "Dropoff Time", "Price(RM)"
            }
        ));
        table1.setSelectionBackground(new java.awt.Color(253, 211, 56));
        table1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(110, 220, 520, 420);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Backgrounds/cus_mail.png"))); // NOI18N
        background.setText("jLabel1");
        background.setMaximumSize(new java.awt.Dimension(1338, 768));
        background.setMinimumSize(new java.awt.Dimension(1338, 768));
        background.setPreferredSize(new java.awt.Dimension(1338, 768));
        getContentPane().add(background);
        background.setBounds(0, -60, 1340, 890);

        returnBT.setText("jButton1");
        returnBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBTActionPerformed(evt);
            }
        });
        getContentPane().add(returnBT);
        returnBT.setBounds(10, 20, 190, 80);

        removeBT.setText("jButton1");
        removeBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBTActionPerformed(evt);
            }
        });
        getContentPane().add(removeBT);
        removeBT.setBounds(910, 660, 220, 60);

        confirmBT.setText("jButton1");
        confirmBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBTActionPerformed(evt);
            }
        });
        getContentPane().add(confirmBT);
        confirmBT.setBounds(150, 650, 210, 80);

        cancelBT.setText("jButton1");
        cancelBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBTActionPerformed(evt);
            }
        });
        getContentPane().add(cancelBT);
        cancelBT.setBounds(390, 650, 210, 80);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void returnBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBTActionPerformed
        try {
            // TODO add your handling code here:
            new Customerpage(this.username).setVisible(true);
            this.setVisible(false);
        } catch (IOException ex) {
            Logger.getLogger(cus_mail.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_returnBTActionPerformed

    private void removeBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBTActionPerformed
        // remove declined booking
        DefaultTableModel model = (DefaultTableModel) table2.getModel();
        if (table2.getSelectedRowCount() == 1) {
            try {
                model.removeRow(table2.getSelectedRow());
                ArrayList<String> tempArray = new ArrayList<>();
                ArrayList<Booking> list = readBooking();
                for (Booking b : list) {
                    if (!(b.getCarID().equals(this.car) && b.getUsername().equals(this.username))) {
                        tempArray.add(b.toString());
                    }
                }
                editBooking(tempArray, "cusbooking.txt");
            } catch (IOException ex) {
                Logger.getLogger(cus_mail.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            if (table2.getSelectedRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "The Table is empty!!");
            } else {
                JOptionPane.showMessageDialog(this, "Please select single row everytime!!");
            }
        }
    }//GEN-LAST:event_removeBTActionPerformed

    private void table2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table2MouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) table2.getModel();
        int row = table2.getSelectedRow();
        String carID = model.getValueAt(row, 0).toString();
        this.car = carID;
    }//GEN-LAST:event_table2MouseClicked

    private void table1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) table1.getModel();
        int row = table1.getSelectedRow();
        String carID = model.getValueAt(row, 0).toString();
        this.car = carID;
    }//GEN-LAST:event_table1MouseClicked

    private void confirmBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBTActionPerformed
        // confirm booking
        DefaultTableModel model = (DefaultTableModel) table1.getModel();
        ArrayList<String> tempArray = new ArrayList<>();
        if (table1.getSelectedRowCount() == 1) {
            try {
                model.removeRow(table1.getSelectedRow());
                ArrayList<Booking> list = readBooking();
                for (Booking b : list) {
                    if (b.getCarID().equals(this.car) && b.getUsername().equals(this.username)) {
                        b.setCusConfirmation("confirm");
                        tempArray.add(b.toString());
                    } else {
                        tempArray.add(b.toString());
                    }
                }
                editBooking(tempArray, "cusbooking.txt");
            } catch (IOException ex) {
                Logger.getLogger(cus_mail.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            if (table1.getSelectedRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "The Table is empty!!");
            } else {
                JOptionPane.showMessageDialog(this, "Please select single row everytime!!");
            }
        }
    }//GEN-LAST:event_confirmBTActionPerformed

    private void cancelBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBTActionPerformed
        // TODO add your handling code here:
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to cancel?", "Confirmation", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            DefaultTableModel model = (DefaultTableModel) table1.getModel();
            if (table1.getSelectedRowCount() == 1) {
                try {
                    model.removeRow(table1.getSelectedRow());
                    ArrayList<String> tempArray = new ArrayList<>();
                    ArrayList<Booking> list = readBooking();
                    for (Booking b : list) {
                        if (!(b.getCarID().equals(this.car) && b.getUsername().equals(this.username))) {
                            tempArray.add(b.toString());
                        }
                    }
                    editBooking(tempArray, "cusbooking.txt");
                } catch (IOException ex) {
                    Logger.getLogger(cus_mail.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                if (table1.getSelectedRowCount() == 0) {
                    JOptionPane.showMessageDialog(this, "The Table is empty!!");
                } else {
                    JOptionPane.showMessageDialog(this, "Please select single row everytime!!");
                }
            }
        }
    }//GEN-LAST:event_cancelBTActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void cus_mail(String username) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cus_mail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cus_mail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cus_mail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cus_mail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cus_mail().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JButton cancelBT;
    private javax.swing.JButton confirmBT;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton removeBT;
    private javax.swing.JButton returnBT;
    private javax.swing.JTable table1;
    private javax.swing.JTable table2;
    // End of variables declaration//GEN-END:variables
}
